# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: UserService API
    description: Manages user resources.
    version: 0.0.1
paths:
    /v1/users:
        get:
            tags:
                - UserService
            description: |-
                Lists users.

                 This follows the AIP-132 standard for List methods.
            operationId: UserService_ListUsers
            parameters:
                - name: pageSize
                  in: query
                  description: The maximum number of users to return.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: The next_page_token value returned from a previous List request, if any.
                  schema:
                    type: string
                - name: filter
                  in: query
                  description: |-
                    A string value to restrict results based on a specific field.
                     For example: "display_name=John" or "email=john@example.com"
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListUsersResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - UserService
            description: |-
                Creates a new user.

                 This follows the AIP-133 standard for Create methods.
            operationId: UserService_CreateUser
            parameters:
                - name: userId
                  in: query
                  description: Optional user id. Will be generated by system if not provided.
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/users/{user}:
        get:
            tags:
                - UserService
            description: |-
                Gets a user.

                 This follows the AIP-131 standard for Get methods.
            operationId: UserService_GetUser
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - UserService
            description: |-
                Deletes a user.

                 This follows the AIP-135 standard for Delete methods.
            operationId: UserService_DeleteUser
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - UserService
            description: |-
                Updates a user.

                 This follows the AIP-134 standard for Update methods.
            operationId: UserService_UpdateUser
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        ListUsersResponse:
            type: object
            properties:
                users:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                    description: The list of users.
                nextPageToken:
                    type: string
                    description: A token to retrieve the next page of results, or empty if there are no more results.
            description: Response message for ListUsers method.
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        User:
            required:
                - displayName
                - email
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The resource name of the user.
                         Format: users/{user_id}
                displayName:
                    type: string
                    description: The display name of the user.
                email:
                    type: string
                    description: The email address of the user.
                createTime:
                    readOnly: true
                    type: string
                    description: The creation time of the user.
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    description: The last update time of the user.
                    format: date-time
            description: A user resource.
tags:
    - name: UserService
